require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ResultsController, type: :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResultsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'Editor is logged in' do
    let(:user) { FactoryBot.create(:editor) }
    before do
      db_sign_in user
    end

    before(:each) do
      @evaluation = create :evaluation, created_by: user
      @profile = create :profile, created_by: user
      @control = create :control, profile_id: @profile.id, created_by: user
    end

    describe 'GET #index' do
      it 'returns a success response' do
        create :result, evaluation_id: @evaluation.id, control_id: @control.id, created_by: user
        get :index, params: { evaluation_id: @evaluation.id }, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        result = create :result, evaluation_id: @evaluation.id, control_id: @control.id, created_by: user
        get :show, params: { evaluation_id: @evaluation.id, id: result.to_param }, session: valid_session
        expect(response).to be_success
      end
    end
  end
end
